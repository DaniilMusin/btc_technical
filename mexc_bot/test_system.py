#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ MEXC Trading Bot
"""
import asyncio
import os
import pytest
from dotenv import load_dotenv
from mexc_bot.core.broker import BingxBroker
from mexc_bot.core.strategy import BalancedAdaptiveStrategyLive
from mexc_bot.core.feed import StreamingDataFeed
from mexc_bot.core.trader import LiveTrader

@pytest.mark.asyncio
async def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ MEXC Trading Bot...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv('.env')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"‚úÖ USE_TESTNET: {os.getenv('USE_TESTNET')}")
    print(f"‚úÖ EXCHANGE: {os.getenv('EXCHANGE')}")
    print(f"‚úÖ DEFAULT_SYMBOL: {os.getenv('DEFAULT_SYMBOL')}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    try:
        # Use the USE_TESTNET environment variable instead of hardcoding testnet=True
        use_testnet = os.getenv('USE_TESTNET', 'true').lower() == 'true'
        BingxBroker(testnet=use_testnet)
        print(f"‚úÖ –ë—Ä–æ–∫–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (testnet={use_testnet})")

        BalancedAdaptiveStrategyLive()
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        StreamingDataFeed(
            symbol=os.getenv('DEFAULT_SYMBOL', 'BTCUSDT'),
            interval=os.getenv('DEFAULT_INTERVAL', '15m')
        )
        print("‚úÖ Data Feed —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        LiveTrader(
            symbol=os.getenv('DEFAULT_SYMBOL', 'BTCUSDT'),
            interval=os.getenv('DEFAULT_INTERVAL', '15m'),
            exchange=os.getenv('EXCHANGE', 'BINGX')
        )
        print("‚úÖ –¢—Ä–µ–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_system())
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")